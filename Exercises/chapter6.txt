exer1
1 2 4 8 16 32 64 128

exer2
9384 938 93 9

exer3
5 4 3 2 1 // answer: 5 4 3 2

exer4 
a, b is equivalent
but c is different because i in the c has been increased before the for state
ment begin

exer5
a, b is eqivalent because c always excute the brace after do, bt a, b can not 
be executed when condition is FALSE

exer6
for(int i = 1; i <= 128; i *= 2)
{
	printf("%d", i);
}

exer7
for(int i = 9384; i > 0; i /= 10)
{
	printf("%d ", i);
}

exer8
10 5 3 2 1 1 1 1 1 1 ....

exer9

int i = 10;
while(i >=1)
{
	printf("%d", i++);
	i /= 2;
}

exer10
continue statement is jumping to before the end of the loop body.
so, convert continue to goto LABEL, and put LABEL at the end of the loop body.

exer11
20

exer12
for(d = 2; d * d <= n; d++)
	if(n % d == 0)
		break;

exe13
for (n = 0; m > 0; n++, m /= 2);

exer14
if (n % 2 == 0)
	printf("n is ever \n");
//the NULL statement
