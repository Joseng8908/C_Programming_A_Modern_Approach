exer1)
a) 14
b) 34
c) 4
d) yes
e) false

exer2)
because conversion?
middle = *&((int)(((int)high + (int)low)) / 2);
// answer: because pointer cannot be added
// middle = low + (high - low) / 2;

exer3)
a[N] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

exer4)
int *top_ptr = &contents[0];
void make_empty(void)
{
	 top_ptr = &contents[0];
}

bool is_empty(void)
{
	return top_ptr == &contents[0];
}

bool is_full(void)
{
	return top_ptr == &contents[STACK_SIZE - 1];
}

exer5)
a) illegal
b) true
c) true
d) true

exer6)
int sum_array(const int a[], int n)
{
	int *p = a;
	int i, sum;
	for (; p < (a + n); p++)
		sum += *p;
	return sum;
}

exer7)
bool search(const int a[], int n, int key)
{
	int *p = a;
	for (;p < a + n; p++) {
		if (*p == key) return true;
	}
	return false;
}

exer8)
void store_zeros(int a[], int n)
{
	int *p = a;
	for (; p < a + n; p++)
		*p = 0;
}

exer9)
double inner_product(const double *a, const double *b, int n)
{
	double sum = 0;
	double *a_p = a, *b_p = b;
	for (int i = 0; i < n; i++) {
		sum += (*a_p++) * (*b_p++); 
	}
	return sum;
}

exer10)
int *find_middle(int a[], int n) {
	int *p = a;
	return	p + (int)(n / 2);
}

exer11)
int find_largest(int a[], int n)
{
	int i, max;
	int *p = a;
	max = *p;
	for (; p < p + n; p++)
		if (*p > max)
			max = *p;
	return max;
}

exer12)
void find_two_largest(const int *a, int n, int *largest, int *second_largest)
{
	int *end = a + n;
	*largest = *a;
	*second_largest = *a;
	for	(; a < end; a++) { 
		if (*a > *largest) 
			*largest = *a;
		else if (*a > *second_largest && *largest != *a)
			*second_largest = *a;
	}
}

exer13)
#define N 10

double ident[N][N];
double *p = &ident[N][N];

int track_of_zero = 0;
*p++ = 1.0;

for (; p <= indent[N - 1][N - 1]; p++)
	if (track_of_zero = 10) {
		*p = 1.0;
		track_of_zero = 0;
	}
	else {
		*p = 0.0;
		track_of_zero++;
	}

exer14)
int temperatures[7][24];
bool search(temperatures[0], 168, 32);

bool search(const int a[], int n, int key)
{
	int *p = a;
	for (;p < a + n; p++) {
		if (*p == key) return true;
	}
	return false;
}

exer15)
int a[7][24], *p, i;
for(p = &a[i][0]; p < &a[i][24]; p++) {
	printf("%d", *p);
}

exer16)
int temperatures[7][24];
for (int *p = &temperatures[0][0]; p <= &temperatures[6][23]; p += 24) {
	printf("%d", find_largest(p, 24);
}

exer17)
int sum_two_dimensional_array(const int a[][LEN], int n)
{
	int *p, sum = 0;
	p  = &a[0][0];
	for (; p < &a[0][0] + n * LEN; p++)
		sum += *p;

	return sum;
}

exer18)
int evaluate_position(char board[8][8])
{
	char *p;
	int sum_white = 0;
	int sum_black = 0;

	for (p = &board[0][0]; p < &board[0][0] + (8 * 8); p++)
		switch (*p) {
			case 'Q': sum_white += 9; break;		
			case 'R': sum_white += 5; break;		
			case 'B': sum_white += 3; break;		
			case 'N': sum_white += 3; break;		
			case 'P': sum_white += 1; break;
			case 'q': sum_black += 9; break;
			case 'r': sum_black += 5; break;
			case 'b': sum_black += 3; break;
			case 'n': sum_black += 3; break;
			case 'p': sum_black += 1; break;
		}
	return (int)(sum_white - sum_black);
}
